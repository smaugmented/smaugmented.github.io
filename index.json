[{"categories":null,"contents":" Adding Syna to your site You can use Syna by adding it as a submodule to your website repository and pointing the submodule to the latest release. This way whenever you want to update the theme you can just pull the updates and checkout to the latest tag.\ngit submodule init # If you haven't initialized before git submodule add https://github.com/okkur/syna.git themes/syna cd themes/syna git checkout v0.12.0 # Latest release as of now is v0.12.0  You can visit Hugo\u0026rsquo;s documentation on installing themes for more information.\nUsing starter If you don\u0026rsquo;t have a site yet, you can use our starter. Using the starter you will have a sample page with several fragment examples and you can use them to start building your own website.\ngit clone --recurse-submodules https://github.com/okkur/syna-start.git # --recurse-submodules will clone the theme cd syna-start hugo server -D # to build your website, run hugo instead  ","permalink":"/docs/installation/","tags":null,"title":"Installation"},{"categories":null,"contents":" Syna \u0026amp; Fragments Fragments are the base building block of your website. Each page is made up of one or multiple fragments. These can be a navigation fragment, a content fragment and more.\nWhere to put the fragments In Hugo, the simplest way to create a page is to create a directory containing an index.md file. If you need to create a new section for your website, then instead of an index.md file, simply create _index.md. Section pages in Hugo are mostly called list and other pages are called single.\nAfter creating your page, you need to create fragments to populate that page.\nEach fragment is controlled by a content file. This file is located next to index.md of the page if the page is single or in the _index directory if the page is a section one or homepage.\nFor example: - content/my-page/index.md: defines the page and a few attributes such as page title - content/my-page/my-fragment.md: content file for a fragment specified as attribute fragment = \u0026quot;content\u0026quot;\nThat fragment file should contain at least the following:\n+++ fragment = \u0026quot;[The fragment you want to use]\u0026quot; weight = 10 +++  For single pages, the directory content would look something like the following:\ncontent ├── my-page | ├── index.md | ├── nav.md | ├── hero | | ├── index.md   content directory: The directory where Hugo looks for pages of the website  my-page directory: A page called my-page which is accessible by [path-to-website]/my-page  index.md: Contains page title, url and other page properties. Can also be a fragment itself. nav.md: A nav fragment. Would override any other global fragment named nav. hero directory: A directory that can contain a single fragment. Name of the fragment would be hero and would override any other fragment named hero.  index.md: Controller file for the hero fragment     For list pages, it\u0026rsquo;s just a bit different:\ncontent | ├── my-section | | ├── _index.md | | ├── _index | | | ├── index.md | | ├── my-page | | | ├── index.md   _index.md: This file is the same as my-page/index.md in the single layout but it cannot be a fragment _index directory: For list pages, fragments are located in this directory  index.md: This file should be a headless page. If not, Hugo would render the page. You can use this file as fragment.   Global fragments such as nav and footer and copyright can be located in the content/_global directory. Fragments located in this directory would appear in every page unless there\u0026rsquo;s another fragment with the same name closer to the page.\nGlobal Fragments For fragments of a website, that need to show up on every page, we have global fragments. Global fragments are located in a special content directory content/_global/. All fragments within this directory are rendered on all pages by default.\nTo prevent the page being rendered as a separate page on your website, we define the whole directory as a headless bundle within the index.md file. To overwrite a global fragment create a per page fragment with the same filename. This would overwrite the global one.\nAside from the content/_global/ directory, you can create _global/ directory in any section\u0026rsquo;s directory (content/[section]/_global/). Each section can have global fragments and if there are multiple fragments with the same name, the fragment closest to the page would override the others.\nBuilt-in fragments There are several pre-bundled fragments already available in Syna. You can see the full list and their documentation in the fragments section. These fragments make use of some global variables along with their own variables which are mentioned in the fragment\u0026rsquo;s page.\nCustom fragments You can add your own custom fragment by creating a new layout file within your website\u0026rsquo;s layouts/partials/fragments/ directory. If this path doesn\u0026rsquo;t exist yet, you can create it beforehand.\nFragments with subitems For image bundling or subitems in fragments such as member or items a subdirectory should be used.\n content/my-page/index.md defines the page and a few attributes such as page title\n content/my-page/member.md content file for a fragment specified as attribute fragment = \u0026quot;member\u0026quot;\n content/my-page/member/my-teammate.md individual content file per member\n content/my-page/member/my-teammate.png  The attributes and content of this file are passed to the specified fragment (fragment = \u0026quot;member\u0026quot;). Using the weight attribute you can specify the order.\nShort-comings As mentioned, fragments are controlled by content files. There is one exception and that is menus. Hugo does not allow menus to be defined in content files. In order to customize menu options for a fragment you need to configure them within your website\u0026rsquo;s config.toml file. As of right now there are three fragments using menus:\n nav: menu.prepend, menu.main and menu.postpend footer: menu.footer and menu.footer_social copyright: menu.copyright_footer  Whenever Hugo allows for resource menus or when we figure out a way to have menu features with frontmatter arrays this would change and menus would be configurable with resource variables like everything else. The change would be breaking. So when updating the theme please read the CHANGELOG and check for breaking changes.\nFurthermore we use two keywords, that can\u0026rsquo;t be used to create pages. Both ìndex and global have a special meaning within the Syna fragment and using them separately might lead to issues.\n","permalink":"/docs/fragments/","tags":null,"title":"Fragments"},{"categories":null,"contents":" Syna has a built-in communication stream that is mostly used to send messages between fragments. Although the stream is not limited to fragments, it can be used to publish anything and anywhere in the code, a subscriber can be added that can listen to the published events.\nThe stream has three main functions, publish, subscribe and unsubscribe. Any event published using the publish function can be listened to by subscribe function, allowing easy, decoupled and isolated functionalities inside fragments and the whole page.\nEvents can be triggered either by directly calling the publish function on the window.syna.stream object or by an special url query which is explained below.\npublish function You can call publish function anywhere in your code. In the built-in fragments, it\u0026rsquo;s mostly called on buttons\u0026rsquo; click handlers.\nThe function accepts two arguments, topic and args\ntopic type: string\nEvent topic.\nargs type: string | object\nWhen using the string format, the string should look like the following format:\nkey:value,key2:value2  The string will be converted to an object and will be published as paramaters along with the topic.\nEvent urls There is an easier way to publish events and that is to open a url. This is more useful when the event is going to be published when an a tag is clicked on. The url event is a url with a query appended to it that has an event attribute in it. For example:\n/fragments/stripe/?event=pricing:change\u0026amp;product=Starting plan\u0026amp;price=$9.99/mo\u0026amp;currency=usd  In this example, when the page /fragments/stripe/ is opened, the event stream will translate the query, publishing a pricing:change event with product, price and currency parameters attached to it. If there is an event attribute in the query, every other attribute will be published as it\u0026rsquo;s parameter.\nNOTE: Event urls need to be Base64 encrypted. In order for the example above to work you need to add unsafeEvents = true to your config.toml file. Base64 events need to have e attribute inside them with the entire encrypted query as it\u0026rsquo;s value. The url above will look like this in the Base64 format.\n/fragments/stripe/?e=P2V2ZW50PXByaWNpbmc6Y2hhbmdlJnByb2R1Y3Q9U3RhcnRpbmcgcGxhbiZwcmljZT0kOS45OS9tbyZjdXJyZW5jeT11c2Q=  To convert your event to Base64, use an online service such as base64encode.org or you can call btoa function in your browser\u0026rsquo;s devtools console. For example: btoa('?event=...\u0026amp;key=...\u0026amp;key2=...)\nsubscribe function The subscribe function adds a listener for the specified topic. This function receives the following arguments.\ntopic type: string\nEvent topic.\nlistener The listener function. The function is invoked with event parameters.\nExample: The following published event:\n/fragments/stripe/?event=pricing:change\u0026amp;product=Starting plan\u0026amp;price=$9.99/mo\u0026amp;currency=usd // or by calling the publish function window.syna.stream.publish('pricing:change', { product: 'Starting plan', price: '$9.99/mo', currency: 'usd' })  will trigger the following subscriber:\nwindow.syna.stream.subscribe('pricing:change', function(params) { alert('You have selected ' + params.product) })  ","permalink":"/docs/events/","tags":null,"title":"Events"},{"categories":null,"contents":" There are a few frontmatter variables that can be used for all fragments. The variables are as follows:\nfragment type: string\nRequired for every fragment\nSpecifies what fragment the current file controls. Checkout Fragment Implementation for more info.\nweight type: number\nRequired for every fragment\nThis variable is used for ordering fragments in a page. It can be empty but it would cause the fragment to be sorted in an unexpected manner.\nbackground Set the background of the fragment.\nBackground also affects the text color of the fragment\u0026rsquo;s content. For the background colors of white, light, secondary and primary we use Bootstrap\u0026rsquo;s text_dark class on content and for other backgrounds, we use text_light.\nList of all supported colors can be found in supported colors section of the docs.\ntitle type: string\nSet title of the fragment\nsubtitle type: string\nSet subtitle of the fragment\ntitle_align type: string\naccepted values: right, left, center\nChange alignment of fragment\u0026rsquo;s header\npadding type: string\nExperimental\nChanges the padding of fragment\u0026rsquo;s container\nasset type: asset object\nThis variable is not a global variable but a variable type that is used in a lot of fragments.\nAny fragment that uses this variable type would show either an image or an icon.\nThe type is introduced to make configuring images and icons same between different fragments.\nSome fragments automatically resize images to better fit the layout. For the best result use the documented size of each fragment\u0026rsquo;s asset object. To disable image resizing use assets stored within static/ as these are excluded from auto resizing. Please make sure to provide the correct size as documented for each fragment\u0026rsquo;s asset object.\nasset.image type: string\nLink to an image file. asset.image supports the build in image fallthrough mechanism. If asset.image is set, asset.icon will be ignored.\nasset.icon type: string\nIcon class powered by FontAwesome such as fab fab-github.\nasset.url type: string\nAction/clickable URL of the image or the icon.\nasset.text type: string\nIf asset.image is set, text will be used as alternative text (alt-text) of the image.\n","permalink":"/docs/global-variables/","tags":null,"title":"Global Variables"},{"categories":null,"contents":"Some fragments may display images, if configured in their content files. The configuration accepts a filename and will search for the actual image using a fallthrough mechanism. The lookup order is shown below:\n 1. Lookup within the fragment\u0026rsquo;s subdirectory such as content/[page]/[fragment]/[filename].md). 2. Lookup, if the above doesn\u0026rsquo;t match any files, it will try to match a file within the page directory such as content/[page]. 3. Lookup, if none of the above match any files, it will try the global static/images/ directory.  So the fragment will look in the following order fragment \u0026gt; page \u0026gt; global. If you need to use an image in several pages you can put it in the static/images/ directory and the image would be available globally. But if an image may differ between two pages or even two fragments of same the type, it\u0026rsquo;s possible to collocate it with the content files either on a per page or per fragment level.\nSyna supports custom favicons in config.toml allowing for ICO, PNG or SVG image formats. In order to use one of the custom favicon formats, you can specify the image file name in config.toml and save the image file in the \u0026lsquo;static/\u0026rsquo; directory.\n","permalink":"/docs/image-fallthrough/","tags":null,"title":"Image Fallthrough"},{"categories":null,"contents":"Fragments and various elements can be customized further using Bootstrap color classes. These colors are customized within config.toml to fit the Syna theme.\n   class colors     primary #00838F   secondary #868e96   success #008f54   info #00838F   warning #fdf314   danger #dc1200   light #f8f9fa   dark #343a40    Classes are mainly used for backgrounds and button colors.\nLinks, inline code and other elements will also be changed. These colors can also be overwritten for more details see our style documentation.\n","permalink":"/docs/supported-colors/","tags":null,"title":"Supported Colors"},{"categories":null,"contents":" We develop our front-end code in the assets/ directory which allows us to have a development directory that would be built to be production ready and put inside the static/ and resources/ directories (which are the directories Hugo looks into for front-end files) using Webpack and Hugo\u0026rsquo;s own resource pipelines. To start the build process for development run the following commands:\nmake dep make dev # Or make build for production build  Prerequisites: node and yarn need to be installed on your system.\nStyles Syna is using Bootstrap v4.1 with a customized set of colors. You can change these colors by editing them in config.toml. Change other Bootstrap variables using assets/styles/bootstrap/_variables.scss. Syna customizes some parts of the theme via custom css, which is available in the assets/styles directory.\nFonts FontAwesome Free is supported by default and is used throughout built-in fragments. You can disable it by setting fontawesome.disabled in your config.toml to true.\nIf you want to add FontAwesome Pro to the theme, the following recipe may be helpful.\n Move all the files from fontawesome-pro-[version]-web/webfonts/ (from the archive) to static/fonts1 directory. Move all the files from fontawesome-pro-[version]-web/scss/ (from the archive) to assets/styles/fontawesome1 directory. Set fontawesome.pro in your config.toml file to true.  After these steps, FontAwesome Pro will be loaded in every page of your website.\nJavaScript Syna uses code spliting to get bundles for each fragment. This allows us to have lighter pages in most cases. Within the assets/js/ directory there is an index.js file that is the main script, which is necessary on all pages. Every other script is needed by the fragment of the same name. For example hero.js is needed by the hero fragment.\nIf you want to add an extra script for a specific fragment, you need to add that script as an entry point in the webpack configuration file. Then import that script inside the fragment (using the script tag).\nTranspiled and bundled JS files are located inside assets/scripts/ directory and are generated using Webpack.\nReact support Syna has built-in support for React. We use React portal API inside the react-portal fragment. This allows us to render an empty container that is able to render components inside it.\nTo use this feature you can add a new react-portal to your page, write your component and expose it inside the window.synaPortals object.\nimport * as React from 'react'; class Hello extends React.Component { render() { return ( \u0026lt;h1\u0026gt;Hello World\u0026lt;/h1\u0026gt; ); } } (window.synaPortals || (window.synaPortals = {})).hello = { component: Hello, container: '#hello [data-portal]', };  The #hello [data-portal] is where your component renders. [data-portal] is a div tag inside your react-portal fragment and hello in this example, is the fragment\u0026rsquo;s filename.\nKeep in mind that JSX is not supported by browsers. Please checkout our example Webpack config and the required dependencies and commands.\n Note that the mentioned directory in your website\u0026rsquo;s root directory. If the directory doesn\u0026rsquo;t exist, create it in that path.\r[return]   ","permalink":"/docs/development/","tags":null,"title":"Development"},{"categories":null,"contents":" Fragments themselves are Hugo partials that are located in layouts/partials/fragments/. Partials built into Syna are stored within the theme\u0026rsquo;s layout directory. Hugo enables local or per website overwrites of layouts and partials. For more details checkout Hugo\u0026rsquo;s template lookup order.\nThe default layout single.html is used to render each page. For list pages we use list.html layout. These layouts don\u0026rsquo;t need to be explicitly mentioned\nThe rendering code flow of Syna would do the following:\n single.html or list.html layout is called  The layout decides where the page directory is located (for list pages, it would be a _index directory next to index.md) helpers/fragments.html would find all the global fragments and all the local fragments The process of finding all the fragments involved destructing the path to the page Locating all the _global/ directories in the parent directories and the current directory if the current page is a list page Sorting the said directories from the closest to the page to the furthest, making the local fragments and nearest _global directories more important The helper would then remove duplicate fragments (fragments with the same name or the same directory name) All the page fragments are registered in a Scratch and can later be used for various reasons  head.html partial is rendered from baseof.html layout helpers/fragments-renderer.html is called  Fragments are ordered based on their weight attribute Fragments that are not disabled are rendered (404 fragment would not be rendered in any other page than 404)  A container for modal and React is added to the page in case there is any need for them js.html partial is rendered from baseof.html layout  Creating new fragments In order to create a custom fragment for your website create a new layout file named after your fragment and place it under [project_root]/layouts/partials/fragments/. Fragments are partials and follow the same rules. If you are not familiar with partials more details are available in the Hugo documentation.\n","permalink":"/docs/fragments-implementation/","tags":null,"title":"Fragments Implementation"},{"categories":null,"contents":" In order to deploy your website using Syna follow the Hugo documentation which describes the process of deploying on various hosts or host agnostic approaches.\nEnvironment Variables DEMO_MODE type: boolean\ndefault: false\nIf set to true, all Syna related build time error messages will be muted.\nConfigurations .Site.Params.debug type: boolean\ndefault: false\nIf set to true, Syna related error messages will appear on the page.\n","permalink":"/docs/deployment/","tags":null,"title":"Deployment"},{"categories":null,"contents":null,"permalink":"/search/","tags":null,"title":"Search"},{"categories":null,"contents":null,"permalink":"/","tags":null,"title":"Space Marine Augmented"},{"categories":null,"contents":"Open Source Theme from Okkur for your next project.\nSyna is based on the awesome work by digitalcraftsman with his Hugo Agency Theme.\nThe Hugo Agency Theme was based on the work of David Miller with his Startupbootstrap Agency Theme.\nProvided with \u0026lt;3 by Okkur Labs\nTo actually test out the full single page some Lorem Ipsum:\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur a lorem urna. Quisque in neque malesuada, sollicitudin nunc porttitor, ornare est. Praesent ante enim, bibendum sed hendrerit et, iaculis laoreet felis. Morbi efficitur dui sit amet orci porttitor, nec tincidunt turpis elementum. Suspendisse rutrum, mi ac sollicitudin blandit, eros sem tincidunt enim, vitae feugiat turpis eros ut diam. Nunc hendrerit, nibh vitae dignissim pretium, magna nulla lacinia massa, et interdum lacus purus ultricies lacus. Nulla tincidunt quis lacus in posuere. Integer urna lorem, ultricies ut est vel, rhoncus euismod metus. Vestibulum luctus maximus massa, ut egestas est iaculis in. Nunc nisi dolor, sodales et imperdiet ut, lacinia ac justo. Phasellus ultrices risus cursus maximus lobortis. Vestibulum sagittis elementum dignissim. Suspendisse iaculis venenatis nisl, sed bibendum urna. Aliquam quis pellentesque tortor. Sed sed cursus nisl. Aenean eu lorem condimentum, feugiat mauris vitae, hendrerit tellus.\nMorbi ac sapien at risus volutpat tincidunt. Sed vel lobortis nisl. Sed mattis facilisis dui quis luctus. Aliquam bibendum venenatis tellus, non interdum nunc convallis in. Sed elementum aliquam tortor, vel consectetur sem sollicitudin sit amet. Nullam in elit turpis. Phasellus sagittis lacus massa, eu porta erat dapibus a. Phasellus placerat, nisi nec molestie accumsan, elit ex rutrum augue, ac pulvinar nulla nisl id velit. Pellentesque sapien dolor, tempus vitae elementum in, gravida ac arcu. Morbi facilisis, mi eget fringilla posuere, lorem ipsum euismod ex, id consequat lacus nisl ac tortor. Vivamus pulvinar dui non arcu lacinia faucibus. Vestibulum sapien leo, pretium in ligula et, aliquet mattis augue. Vestibulum tristique mi ultrices suscipit placerat. Nunc vehicula volutpat tellus sed fringilla.\nCurabitur ipsum ipsum, malesuada at tempus sed, pretium vulputate nunc. Praesent nec lectus ut mauris cursus hendrerit a vitae risus. Aliquam sodales lorem nisl, ut euismod dolor interdum ac. Vivamus facilisis justo vulputate augue finibus imperdiet. Aenean sem magna, tempus id orci eu, sodales pulvinar metus. Nullam pharetra ornare est. Vestibulum aliquet turpis et porttitor euismod. Nulla vitae orci orci. Suspendisse fringilla faucibus blandit. Nulla suscipit nulla ut massa elementum sollicitudin. Vivamus ultrices ipsum arcu, in vestibulum erat aliquam quis. Suspendisse eget mauris tellus. Maecenas euismod blandit odio, sed pellentesque orci mollis eget. Sed eget magna eu justo mollis hendrerit.\nSuspendisse molestie, tellus quis finibus facilisis, nulla neque euismod mi, at aliquet lectus arcu ac neque. Proin lacus augue, porttitor in odio vitae, sollicitudin laoreet mi. Donec posuere hendrerit augue hendrerit ornare. Duis vestibulum, nisl sit amet cursus lobortis, felis sapien consequat augue, et accumsan eros ligula id nisl. Praesent iaculis fringilla molestie. Sed consequat nec mi vel venenatis. Nunc felis dui, bibendum ac laoreet pretium, cursus ut orci. Nullam risus nulla, tempus ut bibendum quis, consectetur in risus.\nEtiam eget metus elit. Praesent turpis mi, malesuada nec libero a, cursus varius leo. In malesuada gravida est, nec maximus turpis posuere eu. Proin rutrum mattis lectus. Ut mi elit, tincidunt ut aliquet consequat, facilisis vitae arcu. Proin ut massa auctor, imperdiet sem ac, varius justo. Integer porta tellus quis eros sollicitudin mollis. Donec nulla sem, porttitor et velit vitae, tincidunt congue erat. Vivamus urna libero, viverra non pharetra eu, bibendum id arcu. In fermentum bibendum purus, vitae pharetra ipsum gravida quis. Nunc vitae congue diam. Maecenas pharetra orci vel magna fermentum, vitae auctor sapien consectetur. Nunc tempor erat vel nisi ullamcorper mollis. Sed et lectus accumsan, pharetra nunc scelerisque, finibus leo. Sed tempor eros nec nunc porta sodales.\n","permalink":"/about-old/","tags":null,"title":"About Syna"},{"categories":null,"contents":null,"permalink":"/credits/","tags":null,"title":"About"},{"categories":null,"contents":null,"permalink":"/blog/","tags":null,"title":"Blogs"},{"categories":null,"contents":null,"permalink":"/docs/","tags":null,"title":"Documentation"},{"categories":null,"contents":null,"permalink":"/download/","tags":null,"title":"Download"},{"categories":null,"contents":null,"permalink":"/fragments/","tags":null,"title":"Fragments showcase"},{"categories":null,"contents":null,"permalink":"/faq/","tags":null,"title":"Frequently Asked Questions"},{"categories":null,"contents":null,"permalink":"/news/","tags":null,"title":"News"},{"categories":null,"contents":"Glad to announce, I\u0026rsquo;m releasing serverside profile storing system, that will help me a lot. Instead of using old profile_info.bin file, now the mod will load your loadouts and armors from the server. For now, it won\u0026rsquo;t track armor colors and badges, it\u0026rsquo;s just little tiring, but will be done too, ASAP. Moreover, and mainly why I wanted to implement it, is that it doesn\u0026rsquo;t store your values in some unknown, relative numbers, so that you will lose or mess everything with some new update, like it was before with wargear displacement. Profiles are now done in comfortable way with stringed values of chosen stuff, linked to wargear, colors, badges and classes dictionaries, which are easy to edit on fly.\nWhile implementing this system, I have come to an idea: why do we have different armor sets for PvE and PvP? With this new thing, it\u0026rsquo;s not an issue anymore, your armor choices are shared between branches. Hope you\u0026rsquo;ll like it. In theory, it will also allow some other neat things too, like external profile editing, from site or launcher (if there is such need, like, some advanced techniques) and such. One of other directions to dig on this topic is experience/level and challenges storing, so that 1 lvl/no challenges bug on first launch won\u0026rsquo;t be a problem too.\nOn first time you load the game with this new update, you will be wiped (nothing new tho), but then all next boots will load data from the server. And, as usual, I\u0026rsquo;m waiting for massive bugreport spam in #bugreports!\n","permalink":"/blog/profile_storing/","tags":null,"title":"Serverside Profile Storing"},{"categories":null,"contents":null,"permalink":"/features/","tags":null,"title":"Team"},{"categories":null,"contents":null,"permalink":"/media/","tags":null,"title":"Team"},{"categories":null,"contents":null,"permalink":"/roadmap/","tags":null,"title":"Team"},{"categories":null,"contents":null,"permalink":"/stats/","tags":null,"title":"Team"}]